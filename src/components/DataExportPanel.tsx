
import React, { useState } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Download, FileText, Table, Map, Calendar } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';

const DataExportPanel = ({ sites, selectedSite, searchedCity }) => {
  const [isExporting, setIsExporting] = useState(false);
  const { toast } = useToast();

  const exportToCSV = () => {
    setIsExporting(true);
    
    try {
      const headers = ['Name', 'Type', 'Status', 'Latitude', 'Longitude', 'Distance (km)', 'Category'];
      const csvContent = [
        headers.join(','),
        ...sites.map(site => [
          `"${site.name}"`,
          site.type,
          site.status,
          site.latitude,
          site.longitude,
          site.distance || 0,
          site.category
        ].join(','))
      ].join('\n');

      const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', `terrascan-mining-sites-${new Date().toISOString().split('T')[0]}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      toast({
        title: "Export Successful",
        description: "Mining sites data exported to CSV file.",
      });
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Failed to export data. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsExporting(false);
    }
  };

  const exportToJSON = () => {
    setIsExporting(true);
    
    try {
      const exportData = {
        metadata: {
          exportDate: new Date().toISOString(),
          totalSites: sites.length,
          searchedCity: searchedCity || 'Global',
          application: 'TerraScan by Tushar'
        },
        sites: sites.map(site => ({
          id: site.id,
          name: site.name,
          type: site.type,
          status: site.status,
          coordinates: {
            latitude: site.latitude,
            longitude: site.longitude
          },
          distance: site.distance || 0,
          category: site.category,
          potential: site.potential,
          confidence: site.confidence,
          estimatedValue: site.estimatedValue,
          geologicalFactor: site.geologicalFactor,
          accessRating: site.accessRating
        }))
      };

      const blob = new Blob([JSON.stringify(exportData, null, 2)], { type: 'application/json' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', `terrascan-data-${new Date().toISOString().split('T')[0]}.json`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      toast({
        title: "Export Successful",
        description: "Complete dataset exported to JSON file.",
      });
    } catch (error) {
      toast({
        title: "Export Failed",
        description: "Failed to export data. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsExporting(false);
    }
  };

  const generateReport = () => {
    setIsExporting(true);
    
    try {
      const activeSites = sites.filter(s => s.status === 'active').length;
      const potentialSites = sites.filter(s => s.status === 'potential').length;
      const highPotentialSites = sites.filter(s => s.potential === 'High').length;
      
      const mineralTypes = [...new Set(sites.map(s => s.type))];
      const mineralCounts = mineralTypes.map(type => ({
        type,
        count: sites.filter(s => s.type === type).length
      }));

      const reportContent = `
TERRASCAN MINING ANALYSIS REPORT
Generated by TerraScan by Tushar
Date: ${new Date().toLocaleDateString()}
${searchedCity ? `Location: ${searchedCity}` : 'Scope: Global'}

SUMMARY STATISTICS
==================
Total Mining Sites: ${sites.length}
Active Sites: ${activeSites}
Potential Sites: ${potentialSites}
High Potential Sites: ${highPotentialSites}

MINERAL DISTRIBUTION
===================
${mineralCounts.map(m => `${String(m.type).toUpperCase()}: ${m.count} sites`).join('\n')}

DETAILED SITE INFORMATION
========================
${sites.map(site => `
Site: ${site.name}
Type: ${site.type}
Status: ${site.status}
Location: ${site.latitude}, ${site.longitude}
${site.potential ? `Potential: ${site.potential}` : ''}
${site.confidence ? `Confidence: ${site.confidence}%` : ''}
${site.estimatedValue ? `Estimated Value: ${site.estimatedValue}` : ''}
---`).join('\n')}

This report was generated automatically by TerraScan.
For more information, visit our application.
      `;

      const blob = new Blob([reportContent], { type: 'text/plain' });
      const link = document.createElement('a');
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', `terrascan-report-${new Date().toISOString().split('T')[0]}.txt`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      toast({
        title: "Report Generated",
        description: "Comprehensive analysis report created.",
      });
    } catch (error) {
      toast({
        title: "Report Failed",
        description: "Failed to generate report. Please try again.",
        variant: "destructive"
      });
    } finally {
      setIsExporting(false);
    }
  };

  return (
    <Card className="bg-stone-800/50 border-stone-700">
      <CardHeader className="pb-3">
        <CardTitle className="text-stone-100 flex items-center">
          <Download className="h-5 w-5 mr-2 text-amber-500" />
          Data Export
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="space-y-2">
          <div className="flex justify-between text-sm">
            <span className="text-stone-400">Available Sites:</span>
            <Badge variant="secondary" className="bg-amber-500/20 text-amber-400">
              {sites.length}
            </Badge>
          </div>
          {searchedCity && (
            <div className="flex justify-between text-sm">
              <span className="text-stone-400">Search Area:</span>
              <span className="text-stone-300">{searchedCity}</span>
            </div>
          )}
          <div className="flex justify-between text-sm">
            <span className="text-stone-400">Last Updated:</span>
            <span className="text-stone-300">{new Date().toLocaleDateString()}</span>
          </div>
        </div>

        <div className="space-y-3">
          <Button
            onClick={exportToCSV}
            disabled={isExporting || sites.length === 0}
            className="w-full bg-green-600 hover:bg-green-700 text-white"
            size="sm"
          >
            <Table className="h-4 w-4 mr-2" />
            Export CSV
          </Button>

          <Button
            onClick={exportToJSON}
            disabled={isExporting || sites.length === 0}
            className="w-full bg-blue-600 hover:bg-blue-700 text-white"
            size="sm"
          >
            <FileText className="h-4 w-4 mr-2" />
            Export JSON
          </Button>

          <Button
            onClick={generateReport}
            disabled={isExporting || sites.length === 0}
            className="w-full bg-purple-600 hover:bg-purple-700 text-white"
            size="sm"
          >
            <Calendar className="h-4 w-4 mr-2" />
            Generate Report
          </Button>
        </div>

        {sites.length === 0 && (
          <p className="text-xs text-stone-500 text-center">
            No data available for export. Search for mining sites first.
          </p>
        )}

        {isExporting && (
          <div className="flex items-center justify-center py-2">
            <div className="animate-spin h-4 w-4 border-2 border-amber-500 border-t-transparent rounded-full mr-2" />
            <span className="text-xs text-stone-400">Preparing download...</span>
          </div>
        )}
      </CardContent>
    </Card>
  );
};

export default DataExportPanel;
